// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Home row mods macro
#define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
#define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4
#define DFLT 0
#define NUM 1
#define ARW 2
#define MOD 3
//add comment
/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        
    };
     conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NUM ARW>;
            then-layer = <MOD>;
        };
    };

    td_1: tap_dance_1 {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp N1>, <&kp EXCL>;
    };

    td_2: tap_dance_2 {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp N2>, <&kp AT>;
    };
    td_3: tap_dance_3 {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp N3>, <&kp HASH>;
    };
    td_4: tap_dance_4 {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp N4>, <&kp DLLR>;
    };
    td_5: tap_dance_5 {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp N5>, <&kp PRCNT>;
    };
    td_6: tap_dance_6 {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp N6>, <&kp CARET>;
    };
    td_7: tap_dance_7 {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp N7>, <&kp AMPS>;
    };

    td_8: tap_dance_8 {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp N8>, <&kp ASTRK>;
    };
    td_9: tap_dance_9 {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp N9>, <&kp LPAR>;
    };
    td_0: tap_dance_0 {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp N0>, <&kp RPAR>;
    };
    td_tab: tap_dance_tab {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp SPACE>, <&kp TAB>;
    };
    td_slash: tap_dance_slash {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp FSLH>, <&kp BSLH>;
    };
    td_quote: tap_dance_quote {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp SQT>, <&kp DQT>;
    };
    td_left_bracket: tap_dance_left_bracket {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp LBKT>, <&kp LBRC>;
    };
    td_right_bracket: tap_dance_right_bracket {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp RBKT>, <&kp RBRC>;
    };
    td_cv: tap_dance_cv {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp C>, <&kp V>;
    };
    td_pl: tap_pl {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp P>, <&kp L>;
    };
    td_tn: tap_tn {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp T>, <&kp N>;
    };
    td_iw: tap_iw {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp I>, <&kp W>;
    }; 
    td_dk: tap_dk {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp D>, <&kp K>;
    };
    td_cmaless: tap_cmaless {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp COMMA>, <&kp LT>;
    };
    td_prdgt: tap_prdgt {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp DOT>, <&kp GT>;
    };
    td_sz: tap_sz {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp S>, <&kp Z>;
    };
    td_colon: tap_colon {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp SEMI>, <&kp COLON>;
    };
    td_grave: tap_grave {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp GRAVE>, <&kp TILDE>;
    };
    td_grave_c: tap_grave_c {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&kp LC(GRAVE)>, <&kp LC(C)>;
    };
 
    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
            &kp Q      &kp W      &kp F      &kp P      &kp G          &kp J      &kp L      &kp U      &kp Y      &td_colon
            &kp A        &kp R       &kp S     &kp T     &kp D          &kp H      &kp N     &kp E       &kp I     &kp O
            &kp Z      &kp X      &kp C      &kp V      &kp B          &kp K      &kp M      &td_cmaless  &td_prdgt    &td_slash
                                          &lt NUM BSPC   &kp LSHFT   &lt ARW ENTER  &td_tab    
            >;
        };

        num_layer {
            bindings = <
            &kp ESC    &td_grave  &td_quote   &kp MINUS   &kp UNDER        &trans     &td_left_bracket   &td_right_bracket      &trans      &trans
            &td_1     &td_2      &td_3      &td_4       &td_5         &td_6      &td_7      &td_8      &td_9     &td_0 
            &trans     &trans   &trans    &kp EQUAL      &trans      &kp LEFT       &kp RIGHT     &kp UP   &kp DOWN    &trans
                                             &trans     &trans       &trans       &trans     
            >;
        };  

        arrow_layer {
            bindings = <
            
            &kp LC(LS(TAB))     &kp LC(TAB)      &kp LG(LS(TAB))     &kp LG(TAB)    &trans         &td_grave_c   &kp LG(LS(L))     &kp UP     &kp LG(LS(V))     &trans
            &kp LALT   &kp LCMD   &kp LCTRL   &kp LSHFT   &trans      &kp LC(LG(LS(N4)))       &kp LEFT  &kp DOWN    &kp RIGHT   &kp TAB
            &bt BT_SEL 0     &bt BT_SEL 1   &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_CLR_ALL        &LG(LA(S))     &trans     &kp LG(ENTER)  &kp LG(LS(ENTER))  &trans
                                             &trans     &kp LA(SPACE)         &trans     &trans
            >;
        };

        mod_layer {
            bindings = <
           &kp LG(Q)      &kp LG(W)     &kp LG(F)     &kp LG(P)    &kp LG(G)            &kp LG(J)     &kp LG(L)     &kp LG(U)     &kp LG(Y)    &kp LG(COLON)
           &kp LG(A)    &kp LG(R)  &kp LG(S)  &kp LG(T)      &kp LG(D)              &kp LG(H) &kp LG(N)  &kp LG(E) &kp LG(I) &kp LG(O)
            &kp LG(Z)    &kp LG(X)    &kp LG(C)    &kp LG(V)    &kp LG(B)            &kp LG(K)    &kp LG(M)    &kp LG(COMMA)  &kp LG(DOT)  &kp LG(SLASH)
                                             &trans     &trans         &trans     &trans
            >;
        };
    };
};
